// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arrow-breacrumbs-name: 'arrow-breacrumbs';
$arrow-breacrumbs-x: 41px;
$arrow-breacrumbs-y: 17px;
$arrow-breacrumbs-offset-x: -41px;
$arrow-breacrumbs-offset-y: -17px;
$arrow-breacrumbs-width: 5px;
$arrow-breacrumbs-height: 8px;
$arrow-breacrumbs-total-width: 51px;
$arrow-breacrumbs-total-height: 50px;
$arrow-breacrumbs-image: '../img/sprite/sprite.png';
$arrow-breacrumbs: (41px, 17px, -41px, -17px, 5px, 8px, 51px, 50px, '../img/sprite/sprite.png', 'arrow-breacrumbs', );
$cart-name: 'cart';
$cart-x: 0px;
$cart-y: 0px;
$cart-offset-x: 0px;
$cart-offset-y: 0px;
$cart-width: 21px;
$cart-height: 20px;
$cart-total-width: 51px;
$cart-total-height: 50px;
$cart-image: '../img/sprite/sprite.png';
$cart: (0px, 0px, 0px, 0px, 21px, 20px, 51px, 50px, '../img/sprite/sprite.png', 'cart', );
$facebook-name: 'facebook';
$facebook-x: 41px;
$facebook-y: 0px;
$facebook-offset-x: -41px;
$facebook-offset-y: 0px;
$facebook-width: 10px;
$facebook-height: 17px;
$facebook-total-width: 51px;
$facebook-total-height: 50px;
$facebook-image: '../img/sprite/sprite.png';
$facebook: (41px, 0px, -41px, 0px, 10px, 17px, 51px, 50px, '../img/sprite/sprite.png', 'facebook', );
$like-name: 'like';
$like-x: 21px;
$like-y: 0px;
$like-offset-x: -21px;
$like-offset-y: 0px;
$like-width: 20px;
$like-height: 19px;
$like-total-width: 51px;
$like-total-height: 50px;
$like-image: '../img/sprite/sprite.png';
$like: (21px, 0px, -21px, 0px, 20px, 19px, 51px, 50px, '../img/sprite/sprite.png', 'like', );
$search-name: 'search';
$search-x: 0px;
$search-y: 37px;
$search-offset-x: 0px;
$search-offset-y: -37px;
$search-width: 13px;
$search-height: 13px;
$search-total-width: 51px;
$search-total-height: 50px;
$search-image: '../img/sprite/sprite.png';
$search: (0px, 37px, 0px, -37px, 13px, 13px, 51px, 50px, '../img/sprite/sprite.png', 'search', );
$twitter-name: 'twitter';
$twitter-x: 0px;
$twitter-y: 20px;
$twitter-offset-x: 0px;
$twitter-offset-y: -20px;
$twitter-width: 22px;
$twitter-height: 17px;
$twitter-total-width: 51px;
$twitter-total-height: 50px;
$twitter-image: '../img/sprite/sprite.png';
$twitter: (0px, 20px, 0px, -20px, 22px, 17px, 51px, 50px, '../img/sprite/sprite.png', 'twitter', );
$user-name: 'user';
$user-x: 22px;
$user-y: 20px;
$user-offset-x: -22px;
$user-offset-y: -20px;
$user-width: 16px;
$user-height: 16px;
$user-total-width: 51px;
$user-total-height: 50px;
$user-image: '../img/sprite/sprite.png';
$user: (22px, 20px, -22px, -20px, 16px, 16px, 51px, 50px, '../img/sprite/sprite.png', 'user', );
$spritesheet-width: 51px;
$spritesheet-height: 50px;
$spritesheet-image: '../img/sprite/sprite.png';
$spritesheet-sprites: ($arrow-breacrumbs, $cart, $facebook, $like, $search, $twitter, $user, );
$spritesheet: (51px, 50px, '../img/sprite/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
